#!/usr/bin/env python

import multiprocessing
import logging
import threading
import sys, os
from lsd.pyrpc import PyRPCServer
from lsd.tui import *

########### Simple check-in server

logger = logging.getLogger()

class ActiveWorkerManager:
	_lock = None
	_pools = None
	
	def __init__(self, maxcores):
		self._lock = threading.Lock()
		self._pools = dict()
		self._maxcores = maxcores
		logger.info("LSD manager started, maxcores=%d" % (self._maxcores,))

	def __connect__(self, client_address):
		with self._lock:
			assert client_address not in self._pools
			self._pools[client_address] = 1
			logger.info("%s:%s connected (%d active connections)" % (client_address[0], client_address[1], len(self._pools)))

	def __disconnect__(self, client_address):
		with self._lock:
			del self._pools[client_address]
			logger.info("%s:%s disconnected (%d active connections)" % (client_address[0], client_address[1], len(self._pools)))

	def nworkers(self):
		""" Return the number of workers the client should have active """
		#ncores = multiprocessing.cpu_count()
		ncores = self._maxcores

		with self._lock:
			nworkers = int(float(ncores) / len(self._pools))
		
		if nworkers == 0:
			nworkers = 1

		return nworkers

def usage():
	print "Usage: %s --quiet <max_cores>" % sys.argv[0]

if __name__ == "__main__":
	optlist, (max_cores,) = tui_getopt('q', ['quiet'], 1, usage, stdopts=False)

	# Instantiate a server
	server = PyRPCServer("localhost", 5432)
	server.register_instance(ActiveWorkerManager(int(max_cores)))
	server.serve_forever()
