#!/usr/bin/env python
#
# Example: lsd-import-smf -c ps1_det ps1_exp ./test.smf
#

import sys
import getopt
import lsd
import lsd.smf as smf
from lsd.utils import *
from lsd.tui import *

def usage():
	print "Usage: %s [-a|--auto] [-c|--create] [-r|--radius=<arcsec>] [-f|--fov-radius=<deg>] [-g|--gen-explist] [-e|--explist=explist.txt] <obj_table> <det_table> <exp_table>" % sys.argv[0]

optlist, (dbdir,), (obj_tabname, det_tabname, exp_tabname) = tui_getopt('cge:r:f:a', ['create', 'gen-explist', 'explist=', 'radius=', 'fov-radius=', 'auto'], 3, usage)

create = False
gen_explist = False
explist = None
fovradius = None
radius = 1.
auto = False
make_catalog = True
oldexps = None
for (o, a) in optlist:
	if o == '-a' or o == '--auto':
		auto = True
	elif o == '-c' or o == '--create':
		create = True
	elif o == '-r' or o == '--radius':
		radius = float(a)
	elif o == '-f' or o == '--fov-radius':
		fovradius = float(a)
	elif o == '-g' or o == '--gen-explist':
		gen_explist = True
	elif o == '-e' or o == '--explist':
		explist = np.loadtxt(a, dtype=np.uint64, ndmin=1)

if gen_explist:
	assert explist is None
	assert not auto
	make_catalog = False

if explist is not None:
	assert not gen_explist
	assert not auto

#
# Actual work
#

db = lsd.DB(dbdir)

with db.transaction():
	if (create or auto) and not db.table_exists(obj_tabname):
		smf.create_object_table(db, obj_tabname, det_tabname)

	newexp = None
	if gen_explist or auto:
		print >> sys.stderr, "Scanning what is already in the database..."
		newexp, oldexps = smf.get_new_exposures(db, obj_tabname, det_tabname, exp_tabname)
		print >>sys.stderr, "%d new exposures (%d total)." % (len(newexp), db.table(exp_tabname).nrows())

	if gen_explist:
		for exp in newexp:
			print exp

	if make_catalog:
		smf.make_object_catalog(db, obj_tabname, det_tabname, exp_tabname, radius=radius/3600., explist=newexp, oldexps=oldexps, fovradius=fovradius)

if make_catalog:
	print "Rows in the object table: %d." % (db.table(obj_tabname).nrows())
	print "Rows in the detection table: %d." % (db.table(det_tabname).nrows())
