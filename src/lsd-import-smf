#!/usr/bin/env python
#
# Example: lsd-import-smf -c ps1_det ps1_exp ./test.smf
#

import sys
import getopt
import skysurvey.smf as smf
from   skysurvey.utils import *
from   skysurvey import DB

def usage():
	print "Usage: %s [-c|--create] [-f|--file-list] [-m|--mode] [-o|--offset] [-s|--stride] <db> <det_table> <exp_table> <smf_file(s)>" % sys.argv[0]

try:
	optlist, args = getopt.getopt(sys.argv[1:], 'cfm:s:o:', ['create', 'file-list', 'mode=', 'stride=', 'offset='])
except getopt.GetoptError, err:
	print str(err)
	usage()
	exit(-1)

if len(args) < 4:
	print "Error: Not enough command line arguments."
	usage()
	exit(-1)

(dbdir, det_catdir, exp_catdir, files) = args[0], args[1], args[2], args[3:]

create = False
filelist = False
mode = None
stride = 1
offset = 0
for (o, a) in optlist:
	if o == '-c' or o == '--create':
		create = True
	if o == '-f' or o == '--file-list':
		filelist = True
	if o == '-m' or o == '--mode':
		mode = str(a)
	if o == '-s' or o == '--stride':
		stride = int(a)
	if o == '-o' or o == '--offset':
		offset = int(a)

if filelist:
	files = open(files[0]).read().splitlines()

files = files[offset::stride]

#
# Actual work
#

db = DB(dbdir)

# SMF file import
if not mode or mode == 'import':
	print >> sys.stderr, "Importing SMF files:"
	smf.import_from_smf(db, det_catdir, exp_catdir, files, create)
	print >> sys.stderr, "done."

if not mode or mode == 'postprocess':
	# Build neighbor caches for detections
	print >> sys.stderr, "Building neighbor cache (detections): ",
	db.build_neighbor_cache(det_catdir)

	# Build neighbor caches for images tables
	print >> sys.stderr, "Building neighbor cache (exposures): ",
	smf.make_image_cache(db, det_catdir, exp_catdir)

	# Sanity check: all queries linking to images must resolve within cell
	print >> sys.stderr, "Consistency check: ",
	q = db.query('det_id, ra, dec, exp_id, equinox FROM "%s", "%s"(outer) WHERE equinox == 0' % (det_catdir, exp_catdir))
	for row in q.iterate():
		raise Exception("Inconsistency detected: (det_id, ra, dec, exp_id, equinox) = " + str(row))

	# Compute summary stats for both catalogs
	print >> sys.stderr, "Computing summary statistics (detections): ",
	db.compute_summary_stats(det_catdir)
	print >> sys.stderr, "Computing summary statistics (exposures): ",
	db.compute_summary_stats(exp_catdir)

# Done
det_cat = db.catalog(det_catdir)
exp_cat = db.catalog(exp_catdir)
print "Import done.", det_cat.nrows(), "detections in", exp_cat.nrows() , "exposures."
